#!/usr/bin/python3.7
# -*- coding: utf-8 -*-

"""Пузырьковая сортировка"""


def sort(numbers):
    for i in range(len(numbers)):
        for j in range(len(numbers) - 1, i, -1):
            if numbers[j] < numbers[j-1]:
                numbers[j], numbers[j-1] = numbers[j-1], numbers[j]

    return numbers

if __name__ == '__main__':
    print(sort([5, 90, 3, 2, -7, 0]))

# 1.Для сортировки использовал алгоритм "Пузырьковой сортировки", т.к.
# на начальном этапе изучения является наиболее простым для понимания.
# Данный метод использует следующий алгоритм: сначала сравниваются первые
# два элемента списка. Если первый элемент больше, они меняются местами.
# Если они уже в нужном порядке, оставляем их как есть. Затем переходим к
# следующей паре элементов, сравниваем их значения и меняем местами при
# необходимости. Этот процесс продолжается до последней пары элементов в
# списке. При достижении конца списка процесс повторяется заново
# для каждого элемента. Недостатком данного алгоритма является низкая
# эффективность. Алгоритм повторяется n² раз, даже если список уже отсортирован.
# Наиболее быстрой сортировкой в данный момент считается "Быстрая сортировка"
# основанная на схеме Хоара(Массив разделяется на две части по разные
# стороны от опорного элемента. В процессе
# сортировки элементы меньше опорного помещаются перед ним, а равные или
# большие —позади.Быстрая сортировка начинается с разбиения списка и выбора
# одного из элементов в качестве опорного. А всё остальное передвигаем так, чтобы
# этот элемент встал на своё место. Все элементы меньше него перемещаются влево, а
# равные и большие элементы перемещаются вправо.)

# 2.В python сортировку можно выполнить при помощи функцию sorted(), так же можно
# использовать метод sort()
